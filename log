GO_TEST = GO111MODULE=on go test -p echo git_installed = yes echo PACKAGE_LIST = go list ./...
VERSION:version 0.0.2
version:version 0.0.2
# run from repository root

# Example:
#   make up -- start whole staff
#   make down -- stop and clean whole staff
#	make docker_infrastructrue_up  -- start infrastructrue like etcd kafka clickhouse etc..
include common.mk

PROJECT="CDS"

.PHONY : logo
logo:
	@cat VERSION
	@cat sitlogo

.PHONY : build
build:
	@echo "================= build ======================"
	$(foreach v, $(filter-out $(VARS_OLD) VARS_OLD,$(.VARIABLES)), echo $(v) = $($(v)) >> log)
	$(GO_BUILD)  -ldflags  "$(LD_FLAGS)" -o buildrtu      	rtu/cmd/sync/rtu.go
	$(GO_BUILD)  -ldflags  "$(LD_FLAGS)" -o builddm        	dm/cmd/sync/dm.go
	$(GO_BUILD)  -ldflags  "$(LD_FLAGS)" -o buildgalaxy    	galaxy/galaxy.go

make_build.info:
	@echo "=================docker build ======================"
	docker build --target builder -t mycds_builder:latest . 
	docker build  --target cds  -t cds . 
	@echo "================= docker clean ================================================="
	@if [[ -n "$$(docker images -f "dangling=true" -q)" ]]; then \
	docker rmi $$(docker images -f "dangling=true" -q) ; \
	fi

.PHONY : docker_build
docker_build: make_build.info

.PHONY : docker_app_run
docker_app_run:
	@echo "=================== launch docker app ===================================="
	@docker-compose -f sitdockercompose/app.yml  up -d

.PHONY : docker_build_run
docker_build_run: docker_build docker_run

.PHONY : docker_infrastructrue_up
docker_infrastructrue_up:
	@echo "==================== launch docker infrastructure ========================="
	@docker-compose -f sitdockercompose/infrastructure.yml  up -d

.PHONY : docker_infrastructrue_down
docker_infrastructrue_down:
	docker-compose -f sitdockercompose/infrastructure.yml  down

.PHONY : up
up:  logo docker_build docker_infrastructrue_up docker_app_run
	cd sitdockercompose/init && sh ./init.sh
	@cat sitinfo

.PHONY : down
down:
	@docker-compose -f sitdockercompose/app.yml   -f sit/dockercompose/infrastructure.yml down


# ClickHouse Data System

基于 [go-zero](https:/github.com/tal-tech/go-zero) 构建的 `ClickHouse` 的大数据数据同步、存储、计算系统。
A data syncing, storing, computing tool based on ClickHouse.

![avatar](https:/gitee.com/kevwan/static/raw/master/doc/images/cds/logo.png)

### 系统架构

下图展示了以clickhouse为存储和计算引擎的数仓架构。

![avatar](https:/gitee.com/kevwan/static/raw/master/doc/images/cds/clickhouse_arch1.png)

### 数据同步设计

该部分实现了从MySQLMongoDB数据源自动实时同步数据到ClickHouse集群的功能。

![同步drawio](https:/gitee.com/kevwan/static/raw/master/doc/images/cds/同步drawio.png)

#### 快速开始

[快速开始](docquickstart.md)

### todo list

- 优化前端用户体验
- 更详细的文档如部署方式

欢迎大家使用和 `star` 🤝

交流群

<img src="https:/gitee.com/zyz01/cds/raw/master/doc/weichat.JPG" alt="cds" width="310" />
FROM golang:alpine AS builder
ENV GOPROXY https:/goproxy.cn,direct
ENV CGO_ENABLED 0
ENV GOOS linux
WORKDIR go/cache 
COPY go.mod go.sum .
RUN apk add --no-cache make git
RUN go mod download
WORKDIR cds
COPY . .
RUN mkdir cds/build
RUN go clean && make  build


FROM alpine as cds
WORKDIR cds
RUN apk update --no-cache && apk add --no-cache ca-certificates tzdata
ENV TZ AsiaShanghai
COPY --from=builder cds/build/dm       /cds/build/
COPY --from=builder cds/build/rtu      /cds/build/
COPY --from=builder cds/build/galaxy   /cds/build/
# COPY --from=builder cds/build/make.log /cds/build/
# COPY --from=build go/release/conf.yaml /
version: '2.4'
# networks:
#    bridge:
#         external: true
services:
  mysql:
    image: mysql:8
    ports:
      - "3307:3306"
    volumes:
      - .mysql/init/init.sql:/docker-entrypoint-initdb.d/test.sql
      - .mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
    restart: always
    environment:
       MYSQL_ROOT_PASSWORD: root
    # networks:
    #   - bridge
    healthcheck:
      test: ["CMD", "mysql" ,"-h", "mysql", "-P", "3306", "-u", "root", "-proot" , "-e", "SELECT 1"]
      interval: 2s
      timeout: 5s
      retries: 30
  etcd:
    image: bitnamietcd:3.4.13
    ports:
      - "2379:2379"
      - "2380:2380"
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http:/etcd:2379
    healthcheck:
      test: ["CMD", "etcdctl", "member", "list", '--endpoints="localhost:2379"']
      interval: 2s
      timeout: 5s
      retries: 30
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
  zookeeper:
    image: zookeeper:3.5
    ports:
      - 2181:2181
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 2s
      timeout: 5s
      retries: 30
  ch-server-1:
      image: yandexclickhouse-server
      volumes:
        - .clickhouse/config.xml:/etc/clickhouse-server/config.d/local.xml
        - .clickhouse/macros1.xml:/etc/clickhouse-server/config.d/macros.xml
      ports:
        - 8123:8123
        - 9000:9000
      environment:
        TZ: "AsiaShanghai"
      depends_on:
        mysql:
          condition: service_healthy
        redis:
          condition: service_healthy
        etcd:
          condition: service_healthy
        zookeeper:
          condition: service_healthy
  ch-server-2:
    image: yandexclickhouse-server
    volumes:
      - .clickhouse/config.xml:/etc/clickhouse-server/config.d/local.xml
      - .clickhouse/macros2.xml:/etc/clickhouse-server/config.d/macros.xml
    ports:
      - 8124:8123
      - 9001:9000
    environment:
      TZ: "AsiaShanghai"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      etcd:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
  ch-server-3:
    image: yandexclickhouse-server
    volumes:
      - .clickhouse/config.xml:/etc/clickhouse-server/config.d/local.xml
      - .clickhouse/macros3.xml:/etc/clickhouse-server/config.d/macros.xml
    ports:
      - 8125:8123
      - 9002:9000
    environment:
      TZ: "AsiaShanghai"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      etcd:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
  ch-server-4:
    image: yandexclickhouse-server
    volumes:
      - .clickhouse/config.xml:/etc/clickhouse-server/config.d/local.xml
      - .clickhouse/macros4.xml:/etc/clickhouse-server/config.d/macros.xml
    ports:
      - 8126:8123
      - 9003:9000
    environment:
      TZ: "AsiaShanghai"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      etcd:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
  mongo1:
    image: mongo:4.2
    container_name: mongo1
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30001"]
    # volumes:
      # - .data/mongo-1:/data/db
    ports:
      - 27017:30001
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:30001\"},{_id:1,host:\"mongo2:30002\"},{_id:2,host:\"mongo3:30003\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      interval: 10s
      start_period: 30s

  mongo2:
    image: mongo:4.2
    container_name: mongo2
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30002"]
    # volumes:
      # - .data/mongo-2:/data/db
    ports:
      - 30002:30002

  mongo3:
    image: mongo:4.2
    container_name: mongo3
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30003"]
    # volumes:
      # - .data/mongo-3:/data/db
    ports:
      - 30003:30003
  kafka:
    image: wurstmeisterkafka
    restart: always
    ports:
      - 9092:9092
    environment:
      - ZOOKEEPER_IP=zookeeper
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT:/:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT:/kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 2s
      timeout: 5s
      retries: 30
  kafka-connector:
    image: liliankasemkafka-connect:1.1.0
    hostname: connect
    container_name: connect
    restart: always
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: usr/share/java
    healthcheck:
      test: [ "CMD", "nc", "-z", "kafka-connector", "8083" ]
      interval: 2s
      timeout: 5s
      retries: 30
    volumes:
      - .mongo-kafka-1.2.0-all.jar:/usr/share/java/mongo-kafka-1.2.0-all.jar
    depends_on:
      kafka:
        condition: service_healthy
  canal-server:
    image: canalcanal-server
    restart: always
    environment:
      canal.admin.user: admin
      canal.admin.port: 11110
      canal.admin.passwd: 4ACFE3202A5FF5CF467898FC58AAB1D615029441
      canal.admin.manager: canal-admin:8089
  canal-admin:
    image: canalcanal-admin
    ports:
      - 8089:8089
    healthcheck:
      test: [ "CMD", "curl", "-f", "http:/canal-admin:8089" ]
      interval: 30s
      timeout: 15s
      retries: 30
    restart: always    
    depends_on: 
      - canal-server
    volumes:
      - .canal_admin_conf/canal-template.properties:/home/admin/canal-admin/conf/canal-template.properties

version 0.0.2
